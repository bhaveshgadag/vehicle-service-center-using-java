/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vehservicemgmt;

import com.sun.glass.events.KeyEvent;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.sql.*;
import java.text.ParseException;
import java.util.Collections;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author bhave
 */
public class MainFrame extends javax.swing.JFrame {
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        this.setTitle("Service Center Management System");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TabbedPane = new javax.swing.JTabbedPane();
        ServiceTab = new javax.swing.JPanel();
        ServiceSP = new javax.swing.JScrollPane();
        ServiceTable = new javax.swing.JTable();
        servInsert = new javax.swing.JButton();
        servUpdate = new javax.swing.JButton();
        servDelete = new javax.swing.JButton();
        servView = new javax.swing.JButton();
        addParts = new javax.swing.JButton();
        CustomerTab = new javax.swing.JPanel();
        CustomerSP = new javax.swing.JScrollPane();
        CustomerTable = new javax.swing.JTable();
        custInsert = new javax.swing.JButton();
        custUpdate = new javax.swing.JButton();
        custDelete = new javax.swing.JButton();
        custView = new javax.swing.JButton();
        VehicleTab = new javax.swing.JPanel();
        VehicleSP = new javax.swing.JScrollPane();
        VehicleTable = new javax.swing.JTable();
        vehInsert = new javax.swing.JButton();
        vehUpdate = new javax.swing.JButton();
        vehDelete = new javax.swing.JButton();
        vehView = new javax.swing.JButton();
        PartsTab = new javax.swing.JPanel();
        PartsSP = new javax.swing.JScrollPane();
        PartsTable = new javax.swing.JTable();
        partsInsert = new javax.swing.JButton();
        partsUpdate = new javax.swing.JButton();
        partsDelete = new javax.swing.JButton();
        partsView = new javax.swing.JButton();
        EmployeeTab = new javax.swing.JPanel();
        EmployeeSP = new javax.swing.JScrollPane();
        EmployeeTable = new javax.swing.JTable();
        empInsert = new javax.swing.JButton();
        empUpdate = new javax.swing.JButton();
        empDelete = new javax.swing.JButton();
        empView = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TabbedPane.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        ServiceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Service ID", "Description", "Service Date", "Total Price", "Vehicle", "Customer", "Service Advisor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ServiceTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        ServiceSP.setViewportView(ServiceTable);

        servInsert.setText("Insert");
        servInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                servInsertActionPerformed(evt);
            }
        });

        servUpdate.setText("Update");
        servUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                servUpdateActionPerformed(evt);
            }
        });

        servDelete.setText("Delete");
        servDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                servDeleteActionPerformed(evt);
            }
        });

        servView.setText("View");
        servView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                servViewActionPerformed(evt);
            }
        });

        addParts.setText("Add Parts");
        addParts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPartsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ServiceTabLayout = new javax.swing.GroupLayout(ServiceTab);
        ServiceTab.setLayout(ServiceTabLayout);
        ServiceTabLayout.setHorizontalGroup(
            ServiceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ServiceSP, javax.swing.GroupLayout.DEFAULT_SIZE, 968, Short.MAX_VALUE)
            .addGroup(ServiceTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(servView, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(servInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(servUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addParts, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(servDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ServiceTabLayout.setVerticalGroup(
            ServiceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ServiceTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ServiceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(servInsert)
                    .addComponent(servUpdate)
                    .addComponent(servDelete)
                    .addComponent(servView)
                    .addComponent(addParts))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ServiceSP, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        TabbedPane.addTab("Service", ServiceTab);

        CustomerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Customer Name", "Address", "Contact No.", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CustomerSP.setViewportView(CustomerTable);

        custInsert.setText("Insert");
        custInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custInsertActionPerformed(evt);
            }
        });

        custUpdate.setText("Update");
        custUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custUpdateActionPerformed(evt);
            }
        });

        custDelete.setText("Delete");
        custDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custDeleteActionPerformed(evt);
            }
        });

        custView.setText("View");
        custView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CustomerTabLayout = new javax.swing.GroupLayout(CustomerTab);
        CustomerTab.setLayout(CustomerTabLayout);
        CustomerTabLayout.setHorizontalGroup(
            CustomerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CustomerSP, javax.swing.GroupLayout.DEFAULT_SIZE, 968, Short.MAX_VALUE)
            .addGroup(CustomerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(custView, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(custInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(custUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(custDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        CustomerTabLayout.setVerticalGroup(
            CustomerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CustomerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CustomerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(custInsert)
                    .addComponent(custUpdate)
                    .addComponent(custDelete)
                    .addComponent(custView))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CustomerSP, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        TabbedPane.addTab("Customer", CustomerTab);

        VehicleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Customer Name", "Address", "Contact No.", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        VehicleSP.setViewportView(VehicleTable);

        vehInsert.setText("Insert");
        vehInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehInsertActionPerformed(evt);
            }
        });

        vehUpdate.setText("Update");
        vehUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehUpdateActionPerformed(evt);
            }
        });

        vehDelete.setText("Delete");
        vehDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehDeleteActionPerformed(evt);
            }
        });

        vehView.setText("View");
        vehView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout VehicleTabLayout = new javax.swing.GroupLayout(VehicleTab);
        VehicleTab.setLayout(VehicleTabLayout);
        VehicleTabLayout.setHorizontalGroup(
            VehicleTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(VehicleSP, javax.swing.GroupLayout.DEFAULT_SIZE, 968, Short.MAX_VALUE)
            .addGroup(VehicleTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(vehView, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vehInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vehUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vehDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        VehicleTabLayout.setVerticalGroup(
            VehicleTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, VehicleTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(VehicleTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vehInsert)
                    .addComponent(vehUpdate)
                    .addComponent(vehDelete)
                    .addComponent(vehView))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(VehicleSP, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        TabbedPane.addTab("Vehicle", VehicleTab);

        PartsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Customer Name", "Address", "Contact No.", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PartsSP.setViewportView(PartsTable);

        partsInsert.setText("Insert");
        partsInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                partsInsertActionPerformed(evt);
            }
        });

        partsUpdate.setText("Update");
        partsUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                partsUpdateActionPerformed(evt);
            }
        });

        partsDelete.setText("Delete");
        partsDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                partsDeleteActionPerformed(evt);
            }
        });

        partsView.setText("View");
        partsView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                partsViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PartsTabLayout = new javax.swing.GroupLayout(PartsTab);
        PartsTab.setLayout(PartsTabLayout);
        PartsTabLayout.setHorizontalGroup(
            PartsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PartsSP, javax.swing.GroupLayout.DEFAULT_SIZE, 968, Short.MAX_VALUE)
            .addGroup(PartsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(partsView, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(partsInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(partsUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(partsDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PartsTabLayout.setVerticalGroup(
            PartsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PartsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PartsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(partsInsert)
                    .addComponent(partsUpdate)
                    .addComponent(partsDelete)
                    .addComponent(partsView))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(PartsSP, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        TabbedPane.addTab("Parts", PartsTab);

        EmployeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Customer Name", "Address", "Contact No.", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        EmployeeSP.setViewportView(EmployeeTable);

        empInsert.setText("Insert");
        empInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empInsertActionPerformed(evt);
            }
        });

        empUpdate.setText("Update");
        empUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empUpdateActionPerformed(evt);
            }
        });

        empDelete.setText("Delete");
        empDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empDeleteActionPerformed(evt);
            }
        });

        empView.setText("View");
        empView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout EmployeeTabLayout = new javax.swing.GroupLayout(EmployeeTab);
        EmployeeTab.setLayout(EmployeeTabLayout);
        EmployeeTabLayout.setHorizontalGroup(
            EmployeeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(EmployeeSP, javax.swing.GroupLayout.DEFAULT_SIZE, 968, Short.MAX_VALUE)
            .addGroup(EmployeeTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(empView, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(empInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(empUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(empDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        EmployeeTabLayout.setVerticalGroup(
            EmployeeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EmployeeTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EmployeeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(empInsert)
                    .addComponent(empUpdate)
                    .addComponent(empDelete)
                    .addComponent(empView))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(EmployeeSP, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        TabbedPane.addTab("Employee", EmployeeTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    public void InfoDialog(String message){
        JFrame f = new JFrame();
        JOptionPane.showMessageDialog(f, message);
    }
    
    
    public static void onlyNumber(java.awt.event.KeyEvent evt){
        char vChar = evt.getKeyChar();
        if(!Character.isDigit(vChar)
                || (vChar == KeyEvent.VK_BACKSPACE)
                || (vChar == KeyEvent.VK_DELETE)){
            evt.consume();
        }
    }
    
    public static void letterSpace(java.awt.event.KeyEvent evt){
        char vChar = evt.getKeyChar();
        if (!((Character.isLetter(vChar)) || (vChar==KeyEvent.VK_BACKSPACE)
                || (vChar==KeyEvent.VK_DELETE) || (vChar==KeyEvent.VK_SPACE))
                ) {  
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
        }
    }
    
    public static void letterNumSpace(java.awt.event.KeyEvent evt){
        char vChar = evt.getKeyChar();
        if (!((Character.isAlphabetic(vChar)) || (vChar==KeyEvent.VK_BACKSPACE)
                || (vChar==KeyEvent.VK_DELETE) || (vChar==KeyEvent.VK_SPACE)
                || (Character.isDigit(vChar)))){  
            Toolkit.getDefaultToolkit().beep();  
            evt.consume(); 
        }
    }
    
    public static void letterNumbers(java.awt.event.KeyEvent evt){
        char vChar = evt.getKeyChar();
        if(!Character.isLetterOrDigit(vChar)
                || (vChar == KeyEvent.VK_BACKSPACE)
                || (vChar == KeyEvent.VK_DELETE)){
            evt.consume();
        }
    }
    
    
    private void custInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custInsertActionPerformed
            CustomerDialog dialog = new CustomerDialog(this, Boolean.TRUE);
            dialog.setVisible(true);
            
    }//GEN-LAST:event_custInsertActionPerformed

    private void custUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custUpdateActionPerformed
        // TODO add your handling code here:
        if(CustomerTable.getSelectedRow() != -1){
            try {
                CustomerDialog dialog = new CustomerDialog(this, true);
                dialog.updateDetails((int)CustomerTable.getValueAt(CustomerTable.getSelectedRow(), 0));
                dialog.custAdd.setText("Update");
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally{
                custViewActionPerformed(evt);
            }
        }
        else{
            InfoDialog("No row selected.");
        }
        
    }//GEN-LAST:event_custUpdateActionPerformed

    private void custDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custDeleteActionPerformed
        // TODO add your handling code here:
        try {
            if (CustomerTable.getSelectedRow()!=-1) {
                dbconn.custDelete((int)CustomerTable.getValueAt(CustomerTable.getSelectedRow(), 0));
            }
            else{
                InfoDialog("No record selected.");
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            custViewActionPerformed(evt);
        }
    }//GEN-LAST:event_custDeleteActionPerformed

    private void custViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custViewActionPerformed
        // TODO add your handling code here:
        try {
            String[] coln = {"Customer ID", "Customer Name", "Address", "Contact No.", "Email"};
            Vector<String> columnNames = new Vector<String>();
            Collections.addAll(columnNames, coln);
            CustomerTable.setModel(new DefaultTableModel(dbconn.custDetails(), columnNames));
        } catch (SQLException e) {
            System.out.println("custViewActionPerformed "+e);
        }    
    }//GEN-LAST:event_custViewActionPerformed

    private void servInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_servInsertActionPerformed
        // TODO add your handling code here:
        try{
            ServiceDialog dialog = new ServiceDialog(this, true);
            dialog.setVisible(true);
        }
        catch(Exception e){
        }
        finally{
            servViewActionPerformed(evt);
        }
    }//GEN-LAST:event_servInsertActionPerformed

    private void servUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_servUpdateActionPerformed
        // TODO add your handling code here:
        if(ServiceTable.getSelectedRow() != -1){
            try {
                ServiceDialog dialog = new ServiceDialog(this, true);
                dialog.updateDetails((int)ServiceTable.getValueAt(ServiceTable.getSelectedRow(), 0));
                dialog.serviceAdd.setText("Update");
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally{
                servViewActionPerformed(evt);
            }
        }
        else{
            InfoDialog("No record selected.");
        }
    }//GEN-LAST:event_servUpdateActionPerformed

    private void servDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_servDeleteActionPerformed
        try {
            if (ServiceTable.getSelectedRow()!=-1) {
                dbconn.serviceDelete((int)ServiceTable.getValueAt(ServiceTable.getSelectedRow(), 0));
                servViewActionPerformed(evt);
            }
            else{
                InfoDialog("No record selected.");
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            servViewActionPerformed(evt);
        }
    }//GEN-LAST:event_servDeleteActionPerformed

    private void servViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_servViewActionPerformed
        // TODO add your handling code here:
        try {
            String[] coln = {"Service ID", "Job Description", "Date", "Total Price", "Registraion No.", "Customer Name", "Service Advisor"};
            Vector<String> columnNames = new Vector<String>();
            Collections.addAll(columnNames, coln);
            ServiceTable.setModel(new DefaultTableModel(dbconn.serviceDetails(), columnNames));
        } catch (SQLException e) {
            System.out.println("servViewActionPerformed :"+e);
        }
    }//GEN-LAST:event_servViewActionPerformed

    private void vehInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vehInsertActionPerformed
        VehicleDialog dialog = new VehicleDialog(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_vehInsertActionPerformed

    private void vehUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vehUpdateActionPerformed
        // TODO add your handling code here:
        if(VehicleTable.getSelectedRow() != -1){
            try {
                VehicleDialog dialog = new  VehicleDialog(this, true);
                dialog.updateDetails((Long)VehicleTable.getValueAt(VehicleTable.getSelectedRow(), 0));
                dialog.vehAdd.setText("Update");
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally{
                vehViewActionPerformed(evt);
            }
        }
        else{
            InfoDialog("No record selected.");
        }
        
    }//GEN-LAST:event_vehUpdateActionPerformed

    private void vehDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vehDeleteActionPerformed
        // TODO add your handling code here:
        try {
            if (VehicleTable.getSelectedRow()!=-1) {
                dbconn.vehDelete((Long)VehicleTable.getValueAt(VehicleTable.getSelectedRow(), 0));
                vehViewActionPerformed(evt);
            }
            else{
                InfoDialog("No record selected.");
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            vehViewActionPerformed(evt);
        }
    }//GEN-LAST:event_vehDeleteActionPerformed

    private void vehViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vehViewActionPerformed
        // TODO add your handling code here:
        try {
            String[] coln = {"Vehicle ID", "Registration No.", "Company", "Model", "Vehicle Type","Transmission", "Customer Name"};
            Vector<String> columnNames = new Vector<String>();
            Collections.addAll(columnNames, coln);
            VehicleTable.setModel(new DefaultTableModel(dbconn.vehDetails(), columnNames));
        } catch (SQLException e) {
            System.out.println("vehViewActionPerformed : "+e);
        }
    }//GEN-LAST:event_vehViewActionPerformed

    private void partsInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_partsInsertActionPerformed
        PartsDialog dialog = new PartsDialog(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_partsInsertActionPerformed

    private void partsUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_partsUpdateActionPerformed
        // TODO add your handling code here:
        if(PartsTable.getSelectedRow() != -1){
            try {
                PartsDialog dialog = new  PartsDialog(this, true);
                dialog.updateDetails((int)PartsTable.getValueAt(PartsTable.getSelectedRow(), 0));
                dialog.partAdd.setText("Update");
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally{
                partsViewActionPerformed(evt);
            }
        }
        else{
            InfoDialog("No record selected.");
        }
    }//GEN-LAST:event_partsUpdateActionPerformed

    private void partsDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_partsDeleteActionPerformed
        // TODO add your handling code here:
        try {
            if (PartsTable.getSelectedRow()!=-1) {
                dbconn.partDelete((int)PartsTable.getValueAt(PartsTable.getSelectedRow(), 0));
            }
            else{
                InfoDialog("No record selected.");
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            partsViewActionPerformed(evt);
        }
    }//GEN-LAST:event_partsDeleteActionPerformed

    private void partsViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_partsViewActionPerformed
        // TODO add your handling code here:
        try {
            String[] coln = {"Part ID", "Part Name", "Brand", "MRP"};
            Vector<String> columnNames = new Vector<String>();
            Collections.addAll(columnNames, coln);
            PartsTable.setModel(new DefaultTableModel(dbconn.partDetails(), columnNames));
        } catch (SQLException e) {
            System.out.println("partsViewActionPerformed : "+e);
        }
    }//GEN-LAST:event_partsViewActionPerformed

    private void empInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empInsertActionPerformed
        // TODO add your handling code here:
        EmployeeDialog dialog = new EmployeeDialog(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_empInsertActionPerformed

    private void empUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empUpdateActionPerformed
        // TODO add your handling code here:
        if(EmployeeTable.getSelectedRow() != -1){
            try {
                EmployeeDialog dialog = new  EmployeeDialog(this, true);
                dialog.updateDetails((int)EmployeeTable.getValueAt(EmployeeTable.getSelectedRow(), 0));
                dialog.empAdd.setText("Update");
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally{
                empViewActionPerformed(evt);
            }
        }
        else{
            InfoDialog("No record selected.");
        }
    }//GEN-LAST:event_empUpdateActionPerformed

    private void empDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empDeleteActionPerformed
        // TODO add your handling code here:
        try {
            if (EmployeeTable.getSelectedRow()!=-1) {
                dbconn.empDelete((int)EmployeeTable.getValueAt(EmployeeTable.getSelectedRow(), 0));
            }
            else{
                InfoDialog("No record selected.");
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            partsViewActionPerformed(evt);
        }
    }//GEN-LAST:event_empDeleteActionPerformed

    private void empViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empViewActionPerformed
        // TODO add your handling code here:
        try {
            String[] coln = {"Employee ID", "Employee Name", "Address", "Contact No.", "Date of joining", "Salary"};
            Vector<String> columnNames = new Vector<String>();
            Collections.addAll(columnNames, coln);
            EmployeeTable.setModel(new DefaultTableModel(dbconn.empDetails(), columnNames));
        } catch (SQLException e) {
            System.out.println("empViewActionPerformed :"+e);
        }
    }//GEN-LAST:event_empViewActionPerformed

    private void addPartsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPartsActionPerformed
        // TODO add your handling code here:
        if(ServiceTable.getSelectedRow() != -1){
            BillDialog dialog = new BillDialog(new javax.swing.JFrame(), true);
            dialog.setdet((int)ServiceTable.getValueAt(ServiceTable.getSelectedRow(), 0));
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_addPartsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane CustomerSP;
    private javax.swing.JPanel CustomerTab;
    private javax.swing.JTable CustomerTable;
    private javax.swing.JScrollPane EmployeeSP;
    private javax.swing.JPanel EmployeeTab;
    private javax.swing.JTable EmployeeTable;
    private javax.swing.JScrollPane PartsSP;
    private javax.swing.JPanel PartsTab;
    private javax.swing.JTable PartsTable;
    private javax.swing.JScrollPane ServiceSP;
    private javax.swing.JPanel ServiceTab;
    private javax.swing.JTable ServiceTable;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JScrollPane VehicleSP;
    private javax.swing.JPanel VehicleTab;
    private javax.swing.JTable VehicleTable;
    private javax.swing.JButton addParts;
    private javax.swing.JButton custDelete;
    private javax.swing.JButton custInsert;
    private javax.swing.JButton custUpdate;
    private javax.swing.JButton custView;
    private javax.swing.JButton empDelete;
    private javax.swing.JButton empInsert;
    private javax.swing.JButton empUpdate;
    private javax.swing.JButton empView;
    private javax.swing.JButton partsDelete;
    private javax.swing.JButton partsInsert;
    private javax.swing.JButton partsUpdate;
    private javax.swing.JButton partsView;
    private javax.swing.JButton servDelete;
    private javax.swing.JButton servInsert;
    private javax.swing.JButton servUpdate;
    private javax.swing.JButton servView;
    private javax.swing.JButton vehDelete;
    private javax.swing.JButton vehInsert;
    private javax.swing.JButton vehUpdate;
    private javax.swing.JButton vehView;
    // End of variables declaration//GEN-END:variables
}
